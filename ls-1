#include <stdio.h> 
#include <stdlib.h> 
#include <sys/types.h> 
#include <dirent.h> 
#include <sys/stat.h> 
#include <unistd.h> 
#include <time.h> 
#include <pwd.h> 
#include <grp.h> 
void print_file_permissions(mode_t mode) { 
 printf((S_ISDIR(mode)) ? "d" : "-"); 
 printf((mode & S_IRUSR) ? "r" : "-"); 
 printf((mode & S_IWUSR) ? "w" : "-"); 
 printf((mode & S_IXUSR) ? "x" : "-"); 
 printf((mode & S_IRGRP) ? "r" : "-"); 
 printf((mode & S_IWGRP) ? "w" : "-"); 
 printf((mode & S_IXGRP) ? "x" : "-"); 
 printf((mode & S_IROTH) ? "r" : "-"); 
 printf((mode & S_IWOTH) ? "w" : "-"); 
 printf((mode & S_IXOTH) ? "x" : "-"); 
} 
void print_file_info(const struct stat *buf, char *filename) {  char *file_type; 
 struct passwd *pw; 
 struct group *gr; 
 switch (buf->st_mode & S_IFMT) { 
 case S_IFBLK: 
 file_type = "block device"; 
 break; 
 case S_IFCHR: 
 file_type = "character device"; 
 break; 
 case S_IFDIR: 
 file_type = "directory"; 
 break; 
 case S_IFIFO: 
 file_type = "FIFO/pipe";
 break; 
 case S_IFLNK: 
 file_type = "symbolic link";  break; 
 case S_IFREG: 
 file_type = "regular file";  break; 
 case S_IFSOCK: 
 file_type = "socket"; 
 break; 
 default: 
 file_type = "unknown";  break; 
 } 
 printf("%s", file_type); 
 print_file_permissions(buf->st_mode);  printf(" %ld", (long)buf->st_nlink);  pw = getpwuid(buf->st_uid);  if (pw) { 
 printf(" %s", pw->pw_name);  } else { 
 printf(" %d", buf->st_uid);  } 
 gr = getgrgid(buf->st_gid); 
 if (gr) { 
 printf(" %s", gr->gr_name);  } else { 
 printf(" %d", buf->st_gid);  } 
 printf(" %ld", (long)buf->st_size);  printf(" %s", ctime(&buf->st_mtime));  printf("%s", filename); 
} 
int main(int argc, char **argv) {  DIR *d; 
 struct dirent *dir; 
 struct stat file_stat; 
 if (argc < 2) {
 d = opendir("."); 
 } else { 
 d = opendir(argv[1]); 
 } 
 if (d) { 
 while ((dir = readdir(d)) != NULL) { 
 if (stat(dir->d_name, &file_stat) < 0) { 
 perror("Stat failed"); 
 continue; 
 } 
 print_file_info(&file_stat, dir->d_name); 
 printf("\n"); 
 } 
 closedir(d); 
 } else { 
 perror("Open directory failed"); 
 return 1; 
 } 
 return 0; 
} 
