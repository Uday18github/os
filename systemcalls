#include <stdio.h> 
#include <stdlib.h> 
#include <unistd.h> 
#include <sys/wait.h> 
int main() { 
 pid_t child_pid; 
 child_pid = fork(); 
 if (child_pid < 0) { 
 perror("Fork failed"); 
 exit(EXIT_FAILURE); 
 } 
 if (child_pid == 0) {  
 printf("Child process: PID = %d\n", getpid()); 
 execlp("/bin/ls", "ls", NULL); 
 perror("execlp failed"); 
 exit(EXIT_FAILURE); 
 } 
else
{ 
 printf("Parent process: PID = %d, Child PID = %d\n", getpid(), child_pid); 
 int status;
 waitpid(child_pid, &status, 0); 
 if (WIFEXITED(status)) { 
 printf("Child process exited with status %d\n", WEXITSTATUS(status));  
} 
else 
{ 
 printf("Child process did not exit normally\n"); 
 } 

 exit(EXIT_SUCCESS); 
 } 
 return 0; 
} 
